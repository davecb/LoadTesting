#!/bin/sh
#
# perf2seconds -- read a perf log and do 1-second samples
# 	format: #yyy-mm-dd hh:mm:ss latency xfertime thinktime bytes misc
#		01/Mar/2017 00:00:00 0 0 0 10081 stuff
#	Needs to be filtered to make errors 0 bytes, first
#
ProgName=`basename $0`

main() {
	name=$1

	if [ $# -lt 1 ]; then
		say "$ProgName error: you must supply a parameter"
		say "Usage: $0 parameter"
		exit 1
	fi
	if [ "$name" = "-" ]; then
		name=""
	fi

	cat $name |\
	# this admittedly looks wierd, use --debug to see what it does
	sort -k 2.1,2.2nb -k 2.5,2.6nb -k2.8,2.12nb \
		--temporary-directory=/var/tmp |\
	awk '
	NR == 1 {
		# this assume no leading comments
		if ($1 == "#yyy-mm-dd") {
			getline
		}
		date = $1
		sub("\\.[0-9]*", "", $2)
		time = $2
		print "#date time latency xfertime thinktime bytes transactions"
	}
	/^#/ { echo $0; next } # This does comments: contradiction
	/.*/ {
		sub("\\.[0-9]*", "", $2)
		if (time != $2) {
			report(date, time, latency, xfertime, thinktime,
				bytes, transactions)
			date = $1
			time = $2
			latency = $3
			xfertime = $4 
			thinktime = $5 
			bytes = $6
			transactions = 0
		}
		else {
			latency += $3
			xfertime += $4
			thinktime += $5
			bytes += $6
			transactions++
		}
	}
	END {
		report(date, time, latency, xfertime, thinktime, bytes, transacyions)
	}

	func report(date, time, latency, xfertime, thinktime, bytes, xacts) {
		if (xacts > 0) {
			printf("%s %s %f %f %f %d %d\n",
				date, time, latency/xacts, xfertime/xacts, 
				thinktime/xacts, bytes/xacts, xacts)
		}
	}
'

}

say() {
	echo "$@" 1>&2
}

main "$@"
